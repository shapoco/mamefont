#include <sstream>

#include "mamec/file_type_cpp.hpp"
#include "mamec/mamec_common.hpp"
#include "mamec/metrics.hpp"

namespace mamefont::mamec {

void exportHpp(std::ostream &os, const std::vector<uint8_t> &blob,
               std::string name) {
  os << "#pragma once\n";
  os << "\n";
  os << "// Generated by mamec\n";
  dumpMetrics(blob, os, "//   ");

  mf::Font mameFont(blob.data());
  int glyphTableOffset = mf::FontHeader::SIZE;
  int fragTableOffset = mameFont.fragmentTableOffset();
  int byteCodeOffset = mameFont.byteCodeOffset();

  os << "\n";
  os << "#include <stdint.h>\n";
  os << "\n";
  os << "#ifdef MAMEFONT_USE_PROGMEM\n";
  os << "#include <avr/pgmspace.h>\n";
  os << "#endif\n";
  os << "\n";
  os << "#ifndef MAMEFONT_PROGMEM\n";
  os << "#ifdef PROGMEM\n";
  os << "#define MAMEFONT_PROGMEM PROGMEM\n";
  os << "#else\n";
  os << "#define MAMEFONT_PROGMEM\n";
  os << "#endif\n";
  os << "#define MAMEFONT_PROGMEM_SELF_DEFINED\n";
  os << "#endif\n";
  os << "\n";
  os << "const uint8_t " << name << "_blob[] MAMEFONT_PROGMEM = {\n";
  os << "  // Font Header\n";
  dumpCStyleArrayContent(os, blob, "  ", 0, mf::FontHeader::SIZE, true, true);
  os << "  // Glyph Table\n";
  dumpCStyleArrayContent(os, blob, "  ", glyphTableOffset,
                         fragTableOffset - glyphTableOffset, true, true);
  os << "  // Fragment Table\n";
  dumpCStyleArrayContent(os, blob, "  ", fragTableOffset,
                         byteCodeOffset - fragTableOffset, true, true);
  os << "  // Byte Code Block\n";
  dumpCStyleArrayContent(os, blob, "  ", byteCodeOffset,
                         blob.size() - byteCodeOffset, true, false);
  os << "};\n";
  os << "\n";
  os << "#ifdef MAMEFONT_PROGMEM_SELF_DEFINED\n";
  os << "#undef MAMEFONT_PROGMEM\n";
  os << "#endif\n";
}

}  // namespace mamefont::mamec
