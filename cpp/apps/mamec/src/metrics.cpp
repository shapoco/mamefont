#include <algorithm>
#include <iomanip>
#include <iostream>

#include "mamec/metrics.hpp"

namespace mamefont::mamec {

static std::string compPerf(std::string label, int genFrags, int numInsts,
                            float ratio) {
  std::ostringstream oss;
  char ratioSign = ratio < 0 ? '-' : ratio == 0 ? ' ' : '+';
  ratio = std::abs(ratio);
  oss << s2s(label, 6) << ":" << i2s(genFrags, 5) << " -->" << i2s(numInsts, 5)
      << " " << "(" << ratioSign << f2s(ratio, 5, 2) << "%)";
  return oss.str();
}

void dumpMetrics(const std::vector<uint8_t> &blob, std::ostream &os,
                 const std::string &indent) {
  mf::Status ret;
  const mf::Font font(blob.data());

  int firstCode = font.firstCode();
  int lastCode = font.lastCode();
  int numGlyphs = lastCode - firstCode + 1;

  int glyphTableOffset = mf::FontHeader::SIZE;
  int fragTableOffset = font.fragmentTableOffset();
  int byteCodeOffset = font.byteCodeOffset();

  int gtSize = fragTableOffset - glyphTableOffset;
  int ftSize = byteCodeOffset - fragTableOffset;
  int bcSize = blob.size() - byteCodeOffset;

  float gtPerGlyph = (float)gtSize / (numGlyphs);
  float ftUsage = (float)ftSize * 100 / mf::MAX_FRAGMENT_TABLE_SIZE;
  float bcPerGlyph = (float)bcSize / (numGlyphs);
  float totalPerGlyph = (float)blob.size() / (numGlyphs);

  std::vector<std::pair<std::string, mf::Operator>> operators;
  for (int i = 0; i < static_cast<int>(mf::Operator::COUNT); i++) {
    auto op = static_cast<mf::Operator>(i);
    if (op == mf::Operator::NONE || op == mf::Operator::ABO) continue;
    operators.emplace_back(mf::mnemonicOf(op), op);
  }
  std::sort(operators.begin(), operators.end(),
            [](const auto &a, const auto &b) { return a.first < b.first; });

  std::map<mf::Operator, int> codeSizePerOp;
  std::map<mf::Operator, int> genFragsPerOp;
  for (const auto &opPair : operators) {
    auto op = opPair.second;
    codeSizePerOp[op] = 0;
    genFragsPerOp[op] = 0;
  }

  std::vector<uint8_t> bufferVec(font.calcMaxGlyphBufferSize() * 2);
  mf::Glyph glyph(bufferVec.data());

  std::map<int, int> progCntrReferences;
  for (int i = 0; i < bcSize; i++) {
    progCntrReferences[i] = 0;
  }

  int numTotalPixels = 0;
  int totalGenFrags = 0;
  int totalCodeSize = 0;

  for (int code = firstCode; code <= lastCode; code++) {
    try {
      ret = font.getGlyph(code, &glyph);
    } catch (const mf::MameFontException &e) {
      ret = e.status;
    }
    if (ret != mf::Status::SUCCESS) continue;

    mf::Debugger dbg;
    mf::decodeGlyph(font, &glyph, dbg);
    if (ret != mf::Status::SUCCESS) continue;

    numTotalPixels += glyph.glyphWidth * font.fontHeight();
    for (const auto &opPair : operators) {
      auto op = opPair.second;
      int codeSize =
          dbg.dbgNumInstsPerOpr[static_cast<int>(op)] * mf::instSizeOf(op);
      int genFrags = dbg.dbgGenFragsPerOpr[static_cast<int>(op)];
      codeSizePerOp[op] += codeSize;
      genFragsPerOp[op] += genFrags;
      totalCodeSize += codeSize;
      totalGenFrags += genFrags;
    }

    for (int i = dbg.dbgStartPc; i < dbg.dbgLastPc; i++) {
      progCntrReferences[i]++;
    }
  }
  float totalCompRatio =
      100.0f * (totalCodeSize - totalGenFrags) / totalGenFrags;
  float memEff = (float)numTotalPixels / blob.size();

  int numRemovedBytes = 0;
  int numABO = 0;
  int numUnexpNoRefs = 0;
  for (auto pcPair : progCntrReferences) {
    int pc = pcPair.first;
    int count = pcPair.second;
    if (count == 0) {
      if (blob[byteCodeOffset + pc] == mf::baseCodeOf(mf::Operator::ABO)) {
        numABO++;

      } else {
        numUnexpNoRefs++;
        std::cerr << "*WARNING: Byte code at PC=" << pc
                  << " is not an ABO instruction but has no references."
                  << std::endl;
      }
    } else if (count >= 2) {
      numRemovedBytes += count - 1;
    }
  }
  float addedRatio = 100.0f * numABO / totalCodeSize;
  float removedRatio = 100.0f * numRemovedBytes / totalCodeSize;

  auto fragShape = font.verticalFragment() ? "Vertical" : "Horizontal";
  auto pixelOrder =
      font.farPixelFirst() ? "Far Pixel First" : "Near Pixel First";
  int bpp = mf::getBitsPerPixel(font.fragFormat());

  // Generated by MameFont
  // clang-format off
  os << indent << "Format Version: " << (int)font.formatVersion() << "\n";
  os << indent << "First Code      : " << c2s(font.firstCode()) << "\n";
  os << indent << "Last Code       : " << c2s(font.lastCode()) << "\n";
  os << indent << "Max Glyph Width : " << i2s(font.maxGlyphWidth(), 1) << " px\n";
  os << indent << "Font Height     : " << i2s(font.fontHeight(), 1) << " px\n";
  os << indent << "Total Pixels    : " << i2s(numTotalPixels, 1) << " px\n";
  os << indent << "Fragment Shape  : " << fragShape << "\n";
  os << indent << "Pixel Order     : " << pixelOrder << "\n";
  os << indent << "Pixel Format    : " << i2s(bpp, 0) << " bpp\n";
  os << indent << "Large Font      : " << yn(font.largeFont()) << "\n";
  os << indent << "Proportional    : " << yn(font.proportional()) << "\n";
  os << indent << "Ext. Header     : " << yn(font.hasExtendedHeader()) << "\n";
  os << indent << "Estimated Footprint:\n";
  os << indent << "  Header        : " << i2s(mf::FontHeader::SIZE, 4) << " Bytes\n";
  os << indent << "  Glyph Table   : " << i2s(gtSize, 4) << " Bytes (" << f2s(gtPerGlyph, 6, 2) << " Bytes/glyph)\n";
  os << indent << "  Frag. Table   : " << i2s(ftSize, 4) << " Bytes (" << f2s(ftUsage, 6, 2) << "% used)\n";
  os << indent << "  Byte Codes    : " << i2s(bcSize, 4) << " Bytes (" << f2s(bcPerGlyph, 6, 2) << " Bytes/glyph)\n";
  os << indent << "  Total         : " << i2s(blob.size(), 4) << " Bytes (" << f2s(totalPerGlyph, 6, 2) << " Bytes/glyph)\n";
  os << indent << "Instruction Performance:\n";
  int totalDiff = totalGenFrags - totalCodeSize;
  for (const auto &opPair : operators) {
    auto op = opPair.second;
    int numInsts = codeSizePerOp[op];
    int genFrags = genFragsPerOp[op];
    if (numInsts == 0 && genFrags == 0) continue;
    float ratio = totalDiff == 0 ? 0.0f : (totalCompRatio * (genFrags - numInsts) / totalDiff);
    os << indent << "  " << compPerf(mf::mnemonicOf(op), genFrags, numInsts, ratio) << "\n";
  }
  os << indent << "  " << compPerf("Total", totalGenFrags, totalCodeSize, totalCompRatio) << "\n";
  os << indent << "Byte Code References:\n";
  os << indent << "  Multiple References : " << i2s(numRemovedBytes, 3) << " Bytes\n";
  os << indent << "  No Ref (ABO)        : " << i2s(numABO, 3) << " Bytes\n";
  os << indent << "  No Ref (Unexpected) : " << i2s(numUnexpNoRefs, 3) << " Bytes\n";
  os << indent << "Memory Efficiency: " << f2s(memEff, 6, 3) << " px/Byte\n";
  // clang-format on
}

}  // namespace mamefont::mamec
